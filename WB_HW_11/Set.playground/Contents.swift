//SET
//1. Создайте множество (set) из целых чисел.

var digits: Set<Int> = [5, 6, 7] 
// объявление изменяемого для дальнейшей работы множества типа Int(Hashable) и инициализация ему пустого значения явно! иначе swift распознает в нем литерал массива и вместо множества будет создан массив.

// 2. Добавьте несколько элементов в это множество.

digits.insert(1)
digits.insert(10)
digits.insert(100)

print(digits) // проверяем успешность добавленных значений и их неупорядоченность.
// Для создания нового элемента множества применяется метод insert(_:), которому передается создаваемое значение, которое обязательно должно соответствовать типу множества и быть уникальным, так как при вызове метода возвращается кортеж, элемент которого содержит значение типа Bool, характеризующее успешность проведенной операции. Если возвращен true - элемент успешно добавлен, если false - он уже существует во множестве.

// 3. Удалите один элемент.

digits.remove(10)
// Для удаления элемента из множества используется метод remove(_:), который уничтожает элемент с указанным значением и возвращает его значение или ключевое слово nil, если такого элемента не существует. также мы можем задействовать метод removeAll() для удаления всех элементов из множества.
print(digits)

// 4. Проверьте, существует ли определенный элемент во множестве

digits.contains(100)
// Проверка факта наличия значения во множестве осуществляется с помощью метода contains(_:), который возвращает значение типа Bool в зависимости от результата проверки.

// 5. Примените операции объединения, пересечения и разности на множествах

// Для объединения всех элементов из обоих множеств применяется метод union(_:)
let anotherDigits: Set<Int> = [33, 55, 97, 100]
let unionDigits = digits.union(anotherDigits)
print(unionDigits)

// Метод isDisjoint(with:) определяет - существуют ли в 2-ух множествах общие элементы и в случае их отсутствия возвращает true
digits.isDisjoint(with: anotherDigits)

//Для просмотра разности всех элементов из обоих множеств применяется метод symmetricDifference(_:)
print(digits.symmetricDifference(anotherDigits))


