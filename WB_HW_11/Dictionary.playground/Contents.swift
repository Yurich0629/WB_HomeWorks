//Dictionary

//1. Создайте словарь, где ключами будут строки (названия городов), а значениями — целые числа (их население).
var cities: Dictionary<String, Int> = [:] // Объявляем явный изменяемый для дальнейшей работы пустой словарь,
//ключи элементов которого имеют тип String, а значения типа Int.

//2. Добавьте несколько пар ключ-значение в словарь.
cities["Moscow"] = 10577345 // в результате данного кода получаем словарь cities получает новое значение для элемента с ключом Moscow
cities["St.Peterburg"] = 5647321
cities["Ryazan"] = 557367
print("The city \(cities.keys) has a population: \(cities.values)") // Посмотрим обновленные значения словаря

// 3. Удалите одну пару ключ-значение.
cities.removeValue(forKey: "St.Peterburg")
print(cities)
//Также можно удалить значение, присвоив nil по ключу:
//cities["St.Peterburg"] = nil

// 4. Обновите значение для одного из ключей.
cities["Ryazan"] = 555555
print(cities)

// или, если мы хотим узнать была ли пара ключ-значение добавлена в словарь или изменена по сравнению с существующей парой ключ-значение?

if let oldCities = cities.updateValue(10000000, forKey: "Moscow") {
    print("Population is \(oldCities)")
} else {
    print("Population in that city is not register!")
}
//Вызовем наш словарь для проверки изменения значения!
print(cities)

// 5. Получите значение для одного из ключей.

let city = cities["Moscow"] // тип полученного значения будет Int?(опциональный) так как нельзя быть уверенным, что данный ключ существует в словаре. Если ключ отсутствует в словаре, то возвращается nil.
let anotherCity = cities["Tyla"]
